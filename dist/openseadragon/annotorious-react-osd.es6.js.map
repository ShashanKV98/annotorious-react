{"version":3,"file":"annotorious-react-osd.es6.js","sources":["../../src/Annotorious.tsx"],"sourcesContent":["import { createContext, forwardRef, ReactNode} from 'react';\r\nimport { useContext, useEffect, useImperativeHandle, useState } from 'react';\r\nimport { Annotation, Annotator, Store, StoreChangeEvent } from '@annotorious/annotorious';\r\nimport { useDebounce } from './useDebounce';\r\n\r\ninterface Selection<T extends Annotation = Annotation> {\r\n\r\n  selected: { annotation: T, editable?: boolean }[];\r\n\r\n  pointerEvent?: PointerEvent;\r\n\r\n}\r\n\r\nexport interface AnnotoriousContextState {\r\n\r\n  anno: Annotator;\r\n\r\n  setAnno(anno: Annotator<Annotation, unknown>): void;\r\n\r\n  annotations: Annotation[];\r\n\r\n  selection: Selection;\r\n\r\n}\r\n\r\nexport const AnnotoriousContext = createContext({ \r\n\r\n  anno: undefined, \r\n\r\n  setAnno: undefined, \r\n\r\n  annotations: [], \r\n\r\n  selection: { selected: [] }\r\n\r\n});\r\n\r\nexport const Annotorious = forwardRef<Annotator, { children: ReactNode }>((props: { children: ReactNode }, ref) => {\r\n\r\n  const [anno, setAnno] = useState<Annotator>(null);\r\n\r\n  const [annotations, setAnnotations] = useState<Annotation[]>([]);\r\n\r\n  const [selection, setSelection] = useState<Selection>({ selected: [] });\r\n\r\n  useImperativeHandle(ref, () => anno);\r\n\r\n  useEffect(() => {\r\n    if (anno) {\r\n      const { selection, store } = anno.state;\r\n\r\n      // Components below <Annotorious /> may have\r\n      // loaded annotations into the store already! \r\n      if (store.all().length > 0)\r\n        setAnnotations(store.all());\r\n\r\n      // Keeps annotations in sync with a React state,\r\n      // so clients can render components the usual React way.\r\n      const onStoreChange = (event: StoreChangeEvent<Annotation>) =>\r\n        setAnnotations(() => store.all());\r\n\r\n      store.observe(onStoreChange);\r\n\r\n      // Keep selection in sync with a react state, and resolve them\r\n      // from IDs to annotations automatically, for convenience\r\n      let selectionStoreObserver: (event: StoreChangeEvent<Annotation>) => void;\r\n\r\n      const unsubscribeSelection = selection.subscribe(({ selected, pointerEvent }) => {\r\n        if (selectionStoreObserver) \r\n          store.unobserve(selectionStoreObserver);\r\n\r\n        const resolved = (selected || [])\r\n          .map(({ id, editable }) => ({ annotation: store.getAnnotation(id), editable }));\r\n\r\n        setSelection({ selected: resolved, pointerEvent });\r\n\r\n        selectionStoreObserver = event => {\r\n          const { updated } = event.changes;\r\n\r\n          setSelection(({ selected }) => ({\r\n            selected: selected.map(({ annotation, editable }) => {\r\n              const next = updated.find(u => u.oldValue.id === annotation.id);\r\n              return next ? { annotation: next.newValue, editable } : { annotation, editable };\r\n            })\r\n          }));\r\n        }\r\n\r\n        store.observe(selectionStoreObserver, { annotations: selected.map(({ id }) => id) });\r\n      });\r\n\r\n      return () => {\r\n        store.unobserve(onStoreChange);\r\n        unsubscribeSelection();\r\n      }\r\n    }\r\n  }, [anno]);\r\n\r\n  return (\r\n    <AnnotoriousContext.Provider value={{ \r\n      anno, \r\n      setAnno,\r\n      annotations, \r\n      selection \r\n    }}>\r\n       {props.children}\r\n    </AnnotoriousContext.Provider>\r\n  )\r\n\r\n});\r\n\r\nexport const useAnnotator = <T extends Annotator<any, unknown>>() => {\r\n  const { anno } = useContext(AnnotoriousContext);\r\n  return anno as T;\r\n}\r\n\r\nexport const useAnnotationStore = <T extends Store<Annotation>>() => {\r\n  const { anno } = useContext(AnnotoriousContext);\r\n  return anno?.state.store as T | undefined;\r\n}\r\n\r\nconst _useAnnotations = <T extends Annotation>() => {\r\n  const { annotations } = useContext(AnnotoriousContext);\r\n  return annotations as T[];\r\n}\r\n\r\nconst _useAnnotationsDebouced = <T extends Annotation>(debounce: number) => {\r\n  const { annotations } = useContext(AnnotoriousContext);\r\n  return useDebounce(annotations, debounce) as T[];\r\n}\r\n\r\nexport const useAnnotations = <T extends Annotation>(debounce?: number) =>\r\n  debounce ? _useAnnotationsDebouced<T>(debounce) : _useAnnotations<T>();\r\n\r\nexport const useSelection = <T extends Annotation>() => {\r\n  const { selection } = useContext(AnnotoriousContext);\r\n  return selection as Selection<T>;\r\n}\r\n\r\nexport const useAnnotatorUser = () => {\r\n  const { anno } = useContext(AnnotoriousContext);\r\n  return anno?.getUser();\r\n}\r\n\r\nconst _useViewportState = <T extends Annotation>() => {\r\n  const { anno } = useContext(AnnotoriousContext);\r\n\r\n  const [inViewport, setInViewport] = useState<T[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (anno) {\r\n      const { store, viewport } = anno.state;\r\n\r\n      if (!viewport)\r\n        return;\r\n\r\n      // Keep viewport annotations in sync with a react state, and resolve them\r\n      // from IDs to annotations automatically, for convenience\r\n      let viewportStoreObserver: (event: StoreChangeEvent<T>) => void;\r\n\r\n      const unsubscribeViewport = viewport.subscribe(ids => {\r\n        if (viewportStoreObserver) \r\n          store.unobserve(viewportStoreObserver);\r\n\r\n        const resolved = ids.map(id => store.getAnnotation(id)) as T[];\r\n        setInViewport(resolved);\r\n\r\n        viewportStoreObserver = event => {\r\n          const { updated } = event.changes;\r\n\r\n          setInViewport(annotations => annotations.map(annotation => {\r\n            const next = updated.find(u => u.oldValue.id === annotation.id);\r\n            return next ? next.newValue : annotation;\r\n          }));\r\n        }\r\n\r\n        store.observe(viewportStoreObserver, { annotations: ids });\r\n      });\r\n\r\n      return () => {\r\n        unsubscribeViewport();\r\n      }\r\n    }\r\n  }, [anno]);\r\n\r\n  return inViewport;\r\n}\r\n\r\nconst _useViewportStateDebounced =  <T extends Annotation>(debounce: number) => {\r\n  const inViewport = _useViewportState();\r\n  return useDebounce(inViewport, debounce) as T[];\r\n}\r\n\r\nexport const useViewportState =  <T extends Annotation>(debounce?: number) =>\r\n  debounce ? _useViewportStateDebounced<T>(debounce) : _useViewportState<T>();\r\n"],"names":["AnnotoriousContext","createContext","forwardRef","props","ref","anno","setAnno","useState","annotations","setAnnotations","selection","setSelection","useImperativeHandle","useEffect","store","onStoreChange","event","selectionStoreObserver","unsubscribeSelection","selected","pointerEvent","resolved","id","editable","updated","annotation","next","u","jsx","useSelection","useContext"],"mappings":";;AAyBO,MAAMA,IAAqBC,EAAc;AAAA,EAE9C,MAAM;AAAA,EAEN,SAAS;AAAA,EAET,aAAa,CAAC;AAAA,EAEd,WAAW,EAAE,UAAU,GAAG;AAE5B,CAAC;AAE0BC,EAA+C,CAACC,GAAgCC,MAAQ;AAEjH,QAAM,CAACC,GAAMC,CAAO,IAAIC,EAAoB,IAAI,GAE1C,CAACC,GAAaC,CAAc,IAAIF,EAAuB,CAAE,CAAA,GAEzD,CAACG,GAAWC,CAAY,IAAIJ,EAAoB,EAAE,UAAU,CAAC,EAAA,CAAG;AAElD,SAAAK,EAAAR,GAAK,MAAMC,CAAI,GAEnCQ,EAAU,MAAM;AACd,QAAIR,GAAM;AACR,YAAM,EAAE,WAAAK,GAAW,OAAAI,EAAA,IAAUT,EAAK;AAI9B,MAAAS,EAAM,MAAM,SAAS,KACRL,EAAAK,EAAM,KAAK;AAI5B,YAAMC,IAAgB,CAACC,MACrBP,EAAe,MAAMK,EAAM,KAAK;AAElC,MAAAA,EAAM,QAAQC,CAAa;AAIvB,UAAAE;AAEJ,YAAMC,IAAuBR,EAAU,UAAU,CAAC,EAAE,UAAAS,GAAU,cAAAC,QAAmB;AAC3E,QAAAH,KACFH,EAAM,UAAUG,CAAsB;AAExC,cAAMI,KAAYF,KAAY,CAC3B,GAAA,IAAI,CAAC,EAAE,IAAAG,GAAI,UAAAC,EAAS,OAAO,EAAE,YAAYT,EAAM,cAAcQ,CAAE,GAAG,UAAAC,EAAW,EAAA;AAEhF,QAAAZ,EAAa,EAAE,UAAUU,GAAU,cAAAD,EAAc,CAAA,GAEjDH,IAAyB,CAASD,MAAA;AAC1B,gBAAA,EAAE,SAAAQ,EAAQ,IAAIR,EAAM;AAE1B,UAAAL,EAAa,CAAC,EAAE,UAAAQ,SAAgB;AAAA,YAC9B,UAAUA,EAAS,IAAI,CAAC,EAAE,YAAAM,GAAY,UAAAF,QAAe;AAC7C,oBAAAG,IAAOF,EAAQ,KAAK,CAAAG,MAAKA,EAAE,SAAS,OAAOF,EAAW,EAAE;AACvD,qBAAAC,IAAO,EAAE,YAAYA,EAAK,UAAU,UAAAH,MAAa,EAAE,YAAAE,GAAY,UAAAF;YAAS,CAChF;AAAA,UACD,EAAA;AAAA,QAAA,GAGJT,EAAM,QAAQG,GAAwB,EAAE,aAAaE,EAAS,IAAI,CAAC,EAAE,IAAAG,EAAG,MAAMA,CAAE,EAAG,CAAA;AAAA,MAAA,CACpF;AAED,aAAO,MAAM;AACX,QAAAR,EAAM,UAAUC,CAAa,GACRG;MAAA;AAAA,IAEzB;AAAA,EAAA,GACC,CAACb,CAAI,CAAC,GAGN,gBAAAuB,EAAA5B,EAAmB,UAAnB,EAA4B,OAAO;AAAA,IAClC,MAAAK;AAAA,IACA,SAAAC;AAAA,IACA,aAAAE;AAAA,IACA,WAAAE;AAAA,EACF,GACI,YAAM,SACV,CAAA;AAGJ,CAAC;AAyBM,MAAMmB,IAAe,MAA4B;AACtD,QAAM,EAAE,WAAAnB,EAAA,IAAcoB,EAAW9B,CAAkB;AAC5C,SAAAU;AACT;"}